plugins {
    id 'java'
    id 'jacoco'
}

group = 'org.structutil'
version = '3.0.1-SNAPSHOT'

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    compileJava.options.setEncoding("UTF-8")
    compileTestJava.options.setEncoding("UTF-8")

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "http://repo.typesafe.com/typesafe/repo" }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        //  log4j 2.x
        compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.9.1'
        compile 'org.apache.logging.log4j:log4j-api:2.9.1'
        compile 'org.apache.logging.log4j:log4j-core:2.9.1'
        compile 'org.slf4j:slf4j-api:1.7.30'
        compile 'org.slf4j:jcl-over-slf4j:1.7.30'
        //  junit 4.x and mockito
        testCompile("org.mockito:mockito-core:2.25.0")
        testCompile("junit:junit:4.12")
    }

    test {
        ignoreFailures = true
    }
}


/// <editor-fold desc="codecov">

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/report.xml")
        html.enabled true
        html.destination file("${buildDir}/reports/html")
        csv.enabled false
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            '**/bootstrap/**'
                    ])
        })
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}
/// </editor-fold>