plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
}

group = 'org.structutil'
version = '3.0.1'

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    compileJava.options.setEncoding("UTF-8")
    compileTestJava.options.setEncoding("UTF-8")

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "http://repo.typesafe.com/typesafe/repo" }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        compile 'org.apache.poi:poi:3.17'
        compile 'org.apache.poi:poi-ooxml:3.17'
        compile 'org.dom4j:dom4j:2.1.1'
        //    gson
        compile 'com.google.code.gson:gson:2.8.6'
        //  log4j 2.x
        compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.9.1'
        compile 'org.apache.logging.log4j:log4j-api:2.9.1'
        compile 'org.apache.logging.log4j:log4j-core:2.9.1'
        compile 'org.slf4j:slf4j-api:1.7.30'
        compile 'org.slf4j:jcl-over-slf4j:1.7.30'

        compile 'org.xerial.snappy:snappy-java:1.1.7.3'

        testCompile("org.mockito:mockito-core:2.25.0")
        testCompile("junit:junit:4.12")
    }
}

//  <editor-fold desc="   Maven Publish  Local ">
//  https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:install

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}
task javadocJar(type: Jar) {
    from javadoc {
        failOnError = false
    }
    archiveClassifier = 'javadoc'
}
publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "struct-util"
            from components.java
            //  jar's base name
//            afterEvaluate {
//                println "jar.archiveBaseName:" + jar.archiveBaseName
//                artifactId = jar.archiveBaseName
//            }
            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
        mavenLocal()

        maven { url "http://192.168.0.2:8081/nexus/content/repositories/snapshots" }
        maven { url "http://192.168.0.2:8081/nexus/content/groups/public/" }
        maven { url "http://192.168.0.2:8081/nexus/content/repositories/share" }
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "http://repo.typesafe.com/typesafe/repo" }
        maven { url "http://repo1.maven.org/maven2/" }
    }
}

/// </editor-fold>


/// <editor-fold desc="codecov">

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled false
        xml.destination file("${buildDir}/reports/report.xml")
        html.enabled false
        html.destination file("${buildDir}/reports/html")
        csv.enabled false
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            '**/bootstrap/**'
                    ])
        })
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}
/// </editor-fold>